{
	"assemblies": [
		"packages/xamarin.forms/2.5.1.444934/lib/netstandard1.0/Xamarin.Forms.Core.dll"
	],
	"outputNamespace": "Elmish.XamarinForms.DynamicViews",
	"types": [
		{
			"name": "Xamarin.Forms.Element",
			"members": [
				{
					"name": "ClassId",
					"applyDefault": "null"
				},
				{
					"name": "StyleId",
					"applyDefault": "null"
				}
			]
		},
		{
			"name": "Xamarin.Forms.VisualElement",
			"members": [
				{
					"name": "AnchorX",
					"applyDefault": "0.0"
				},
				{
					"name": "AnchorY",
					"applyDefault": "0.0"
				},
				{
					"name": "BackgroundColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "HeightRequest",
					"applyDefault": "-1.0"
				},
				{
					"name": "InputTransparent",
					"applyDefault": "false"
				},
				{
					"name": "IsEnabled",
					"applyDefault": "true"
				},
				{
					"name": "IsVisible",
					"applyDefault": "true"
				},
				{
					"name": "MinimumHeightRequest",
					"applyDefault": "-1.0"
				},
				{
					"name": "MinimumWidthRequest",
					"applyDefault": "-1.0"
				},
				{
					"name": "Opacity",
					"applyDefault": "1.0"
				},
				{
					"name": "Rotation",
					"applyDefault": "0.0"
				},
				{
					"name": "RotationX",
					"applyDefault": "0.0"
				},
				{
					"name": "RotationY",
					"applyDefault": "0.0"
				},
				{
					"name": "Scale",
					"applyDefault": "1.0"
				},
				{
					"name": "Style",
					"applyDefault": "null"
				},
				{
					"name": "TranslationX",
					"applyDefault": "0.0"
				},
				{
					"name": "TranslationY",
					"applyDefault": "0.0"
				},
				{
					"name": "WidthRequest",
					"applyDefault": "-1.0"
				}
			]
		},
		{
			"name": "Xamarin.Forms.View",
			"members": [
				{
					"name": "HorizontalOptions",
					"applyDefault": "Unchecked.defaultof<Xamarin.Forms.LayoutOptions>",
					"equality": "(this.HorizontalOptions.Alignment == o.HorizontalOptions.Alignment && this.HorizontalOptions.Expands == o.HorizontalOptions.Expands)"
				},
				{
					"name": "VerticalOptions",
					"applyDefault": "Unchecked.defaultof<Xamarin.Forms.LayoutOptions>",
					"equality": "(this.VerticalOptions.Alignment == o.VerticalOptions.Alignment && this.VerticalOptions.Expands == o.VerticalOptions.Expands)"
				},
				{
					"name": "Margin",
					"inputType": "obj",
					"modelType": "Xamarin.Forms.Thickness",
					"conv": "makeThickness",
					"applyDefault": "Unchecked.defaultof<Xamarin.Forms.Thickness>"
				},
				{
					"name": "GestureRecognizers",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList"
				}
			]
		},
		{
			"name": "Xamarin.Forms.IGestureRecognizer",
			"members": [
			]
		},
		{
			"name": "Xamarin.Forms.PanGestureRecognizer",
			"members": [
				{
					"name": "TouchPoints",
					"applyDefault": "1"
				},
				{
					"name": "PanUpdated",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.PanUpdatedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.PanUpdatedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.TapGestureRecognizer",
			"members": [
				{
					"name": "Command",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "NumberOfTapsRequired",
					"applyDefault": "1"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ClickGestureRecognizer",
			"members": [
				{
					"name": "Command",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "NumberOfClicksRequired",
					"applyDefault": "1"
				},
				{
					"name": "Buttons",
					"applyDefault": "Xamarin.Forms.ButtonsMask.Primary"
				}
			]
		},
		{
			"name": "Xamarin.Forms.PinchGestureRecognizer",
			"members": [
				{
					"name": "IsPinching",
					"applyDefault": "false"
				},
				{
					"name": "PinchUpdated",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.PinchGestureUpdatedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ActivityIndicator",
			"members": [
				{
					"name": "Color",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "IsRunning",
					"applyDefault": "false"
				}
			]
		},
		{
			"name": "Xamarin.Forms.BoxView",
			"members": [
				{
					"name": "Color",
					"applyDefault": "Xamarin.Forms.Color.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ProgressBar",
			"members": [
				{
					"name": "Progress",
					"applyDefault": "0.0"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ScrollView",
			"members": [
				{
					"name": "Content",
					"applyDefault": "null"
				},
				{
					"name": "Orientation",
					"uniqueName": "ScrollOrientation",
					"applyDefault": "Unchecked.defaultof<Xamarin.Forms.ScrollOrientation>"
				}
			]
		},
		{
			"name": "Xamarin.Forms.SearchBar",
			"members": [
				{
					"name": "CancelButtonColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "FontFamily",
					"applyDefault": "null"
				},
				{
					"name": "FontAttributes",
					"applyDefault": "Xamarin.Forms.FontAttributes.None"
				},
				{
					"name": "FontSize",
					"applyDefault": "-1.0",
					"inputType": "obj",
					"conv": "makeFontSize"
				},
				{
					"name": "HorizontalTextAlignment",
					"applyDefault": "Xamarin.Forms.TextAlignment.Start"
				},
				{
					"name": "Placeholder",
					"applyDefault": "null"
				},
				{
					"name": "PlaceholderColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "SearchCommand",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Button",
			"members": [
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "Command",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "BorderColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "BorderWidth",
					"applyDefault": "-1.0"
				},
				{
					"name": "CommandParameter",
					"applyDefault": "null"
				},
				{
					"name": "ContentLayout",
					"applyDefault": "null"
				},
				{
					"name": "CornerRadius",
					"uniqueName": "ButtonCornerRadius",
					"applyDefault": "0"
				},
				{
					"name": "FontFamily",
					"applyDefault": "null"
				},
				{
					"name": "FontAttributes",
					"applyDefault": "Xamarin.Forms.FontAttributes.None"
				},
				{
					"name": "FontSize",
					"applyDefault": "-1.0",
					"inputType": "obj",
					"conv": "makeFontSize"
				},
				{
					"name": "Image",
					"uniqueName": "ButtonImageSource",
					"inputType": "string",
					"conv": "makeFileImageSource",
					"applyDefault": "null"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Slider",
			"members": [
				// ugh, beware the order these are set.  setting minimum before maximum throws an exception....
				{
					"name": "Minimum",
					"applyDefault": "0.0"
				},
				{
					"name": "Maximum",
					"applyDefault": "1.0"
				},
				{
					"name": "Value",
					"applyDefault": "0.0"
				},
				{
					"name": "ValueChanged",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ValueChangedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Stepper",
			"members": [
				// ugh, beware the order these are set.  setting minimum before maximum throws an exception....
				{
					"name": "Minimum",
					"applyDefault": "0.0"
				},
				{
					"name": "Maximum",
					"applyDefault": "1.0"
				},
				{
					"name": "Value",
					"applyDefault": "0.0"
				},
				{
					"name": "Increment",
					"applyDefault": "1.0"
				},
				{
					"name": "ValueChanged",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ValueChangedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Switch",
			"members": [
				{
					"name": "IsToggled",
					"applyDefault": "false"
				},
				{
					"name": "Toggled",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ToggledEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ToggledEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.SwitchCell",
			"members": [
				{
					"name": "On",
					"applyDefault": "false"
				},
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "OnChanged",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ToggledEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ToggledEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Grid",
			"members": [
				{
					"name": "RowDefinitions",
					"uniqueName": "GridRowDefinitions",
					"shortName": "rowdefs",
					"applyDefault": "null",
					"elementType": "RowDefinition",
					"modelType": "XamlElement[]",
					"inputType": "obj list",
					"conv": "(fun es -> es |> Array.ofList |> Array.map (fun h -> Xaml.RowDefinition(height=h)))"
				},
				{
					"name": "ColumnDefinitions",
					"uniqueName": "GridColumnDefinitions",
					"shortName": "coldefs",
					"applyDefault": "null",
					"elementType": "ColumnDefinition",
					"modelType": "XamlElement[]",
					"inputType": "obj list",
					"conv": "(fun es -> es |> Array.ofList |> Array.map (fun h -> Xaml.ColumnDefinition(width=h)))"
				},
				{
					"name": "RowSpacing",
					"inputType": "double",
					"applyDefault": "0.0"
				},
				{
					"name": "ColumnSpacing",
					"inputType": "double",
					"applyDefault": "0.0"
				},
				{
					"name": "Children",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList",
					"attached": [
						{
							"name": "Row",
							"uniqueName": "GridRow",
							"modelType": "int",
							"applyDefault": "0"
						},
						{
							"name": "RowSpan",
							"uniqueName": "GridRowSpan",
							"modelType": "int",
							"applyDefault": "0"
						},
						{
							"name": "Column",
							"uniqueName": "GridColumn",
							"modelType": "int",
							"applyDefault": "0"
						},
						{
							"name": "ColumnSpan",
							"uniqueName": "GridColumnSpan",
							"modelType": "int",
							"applyDefault": "0"
						}
					]
				}
			]
		},
		{
			"name": "Xamarin.Forms.AbsoluteLayout",
			"members": [
				{
					"name": "Children",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList",
					"attached": [
						{
							"name": "LayoutBounds",
							"uniqueName": "AbsoluteLayoutBounds",
							"modelType": "Xamarin.Forms.Rectangle",
							"applyDefault": "Xamarin.Forms.Rectangle.Zero"
						},
						{
							"name": "LayoutFlags",
							"uniqueName": "AbsoluteLayoutFlags",
							"modelType": "Xamarin.Forms.AbsoluteLayoutFlags",
							"applyDefault": "Xamarin.Forms.AbsoluteLayoutFlags.None"
						}
					]
				}
			]
		},
		{
			"name": "Xamarin.Forms.RelativeLayout",
			"members": [
				{
					"name": "Children",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList",
					"attached": [
						{
							"name": "BoundsConstraint",
							"uniqueName": "BoundsConstraint",
							"modelType": "Xamarin.Forms.BoundsConstraint",
							"applyDefault": "null"
						},
						{
							"name": "HeightConstraint",
							"uniqueName": "HeightConstraint",
							"modelType": "Xamarin.Forms.Constraint",
							"applyDefault": "null"
						},
						{
							"name": "WidthConstraint",
							"uniqueName": "WidthConstraint",
							"modelType": "Xamarin.Forms.Constraint",
							"applyDefault": "null"
						},
						{
							"name": "XConstraint",
							"uniqueName": "XConstraint",
							"modelType": "Xamarin.Forms.Constraint",
							"applyDefault": "null"
						},
						{
							"name": "YConstraint",
							"uniqueName": "YConstraint",
							"modelType": "Xamarin.Forms.Constraint",
							"applyDefault": "null"
						}
					]
				}
			]
		},
		{
			"name": "Xamarin.Forms.RowDefinition",
			"members": [
				{
					"name": "Height",
					"uniqueName": "RowDefinitionHeight",
					"inputType": "obj",
					"conv": "makeGridLength",
					"applyDefault": "Xamarin.Forms.GridLength.Auto"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ColumnDefinition",
			"members": [
				{
					"name": "Width",
					"uniqueName": "ColumnDefinitionWidth",
					"inputType": "obj",
					"conv": "makeGridLength",
					"applyDefault": "Xamarin.Forms.GridLength.Auto"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ContentView",
			"members": [
				{
					"name": "Content",
					"applyDefault": "null"
				}
			]
		},
		{
			"name": "Xamarin.Forms.TemplatedView",
			"members": []
		},
		{
			"name": "Xamarin.Forms.DatePicker",
			"members": [
				{
					"name": "Date",
					"applyDefault": "Unchecked.defaultof<System.DateTime>"
				},
				{
					"name": "Format",
					"applyDefault": "\"d\""
				},
				{
					"name": "MinimumDate",
					"applyDefault": "new System.DateTime(1900, 1, 1)"
				},
				{
					"name": "MaximumDate",
					"applyDefault": "new System.DateTime(2100, 12, 31)"
				},
				{
					"name": "DateSelected",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.DateChangedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.DateChangedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Picker",
			"members": [
				{
					"name": "ItemsSource",
					"uniqueName": "PickerItemsSource",
					"inputType": "'T list",
					"modelType": "System.Collections.IList",
					"conv": "(fun es -> es |> Array.ofList :> System.Collections.IList)",
					"applyDefault": "null"
				},
				{
					"name": "SelectedIndex",
					"applyDefault": "0"
				},
				//{
				//    "name": "SelectedItem",
				//    "applyDefault": "null"
				//},
				{
					"name": "Title",
					"applyDefault": "null"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "SelectedIndexChanged",
					"applyDefault": "null",
					"inputType": "(int * 'T option) -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> let picker = (sender :?> Xamarin.Forms.Picker) in f (picker.SelectedIndex, (picker.SelectedItem |> Option.ofObj |> Option.map unbox<'T>))))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Frame",
			"members": [
				{
					"name": "OutlineColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "CornerRadius",
					"uniqueName": "FrameCornerRadius",
					"applyDefault": "-1.0f"
				},
				{
					"name": "HasShadow",
					"applyDefault": "true"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Image",
			"members": [
				{
					"name": "Source",
					"uniqueName": "ImageSource",
					"inputType": "string",
					"conv": "makeImageSource",
					"applyDefault": "null"
				},
				{
					"name": "Aspect",
					"applyDefault": "Xamarin.Forms.Aspect.AspectFit"
				},
				{
					"name": "IsOpaque",
					"applyDefault": "true"
				}
			]
		},
		{
			"name": "Xamarin.Forms.InputView",
			"members": [
				{
					"name": "Keyboard",
					"applyDefault": "Xamarin.Forms.Keyboard.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Editor",
			"members": [
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "FontSize",
					"applyDefault": "-1.0",
					"inputType": "obj",
					"conv": "makeFontSize"
				},
				{
					"name": "FontFamily",
					"applyDefault": "null"
				},
				{
					"name": "FontAttributes",
					"applyDefault": "Xamarin.Forms.FontAttributes.None"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "Completed",
					"uniqueName": "EditorCompleted",
					"applyDefault": "null",
					"inputType": "string -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.Editor).Text))"
				},
				{
					"name": "TextChanged",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.TextChangedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Entry",
			"members": [
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "Placeholder",
					"applyDefault": "null"
				},
				{
					"name": "HorizontalTextAlignment",
					"applyDefault": "Xamarin.Forms.TextAlignment.Start"
				},
				{
					"name": "FontSize",
					"applyDefault": "-1.0",
					"inputType": "obj",
					"conv": "makeFontSize"
				},
				{
					"name": "FontFamily",
					"applyDefault": "null"
				},
				{
					"name": "FontAttributes",
					"applyDefault": "Xamarin.Forms.FontAttributes.None"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "PlaceholderColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "IsPassword",
					"applyDefault": "false"
				},
				{
					"name": "Completed",
					"uniqueName": "EntryCompleted",
					"applyDefault": "null",
					"inputType": "string -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.Entry).Text))"
				},
				{
					"name": "TextChanged",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.TextChangedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Label",
			"members": [
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "HorizontalTextAlignment",
					"applyDefault": "Xamarin.Forms.TextAlignment.Start"
				},
				{
					"name": "VerticalTextAlignment",
					"applyDefault": "Xamarin.Forms.TextAlignment.Start"
				},
				{
					"name": "FontSize",
					"applyDefault": "-1.0",
					"inputType": "obj",
					"conv": "makeFontSize"
				},
				{
					"name": "FontFamily",
					"applyDefault": "null"
				},
				{
					"name": "FontAttributes",
					"applyDefault": "Xamarin.Forms.FontAttributes.None"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Layout",
			"members": [
				{
					"name": "IsClippedToBounds",
					"applyDefault": "false"
				},
				{
					"name": "Padding",
					"inputType": "double",
					"conv": "makeThickness",
					"applyDefault": "Unchecked.defaultof<Xamarin.Forms.Thickness>"
				}
			]
		},
		{
			"name": "Xamarin.Forms.StackLayout",
			"members": [
				{
					"name": "Children",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList"
				},
				{
					"name": "Orientation",
					"uniqueName": "StackOrientation",
					"applyDefault": "Xamarin.Forms.StackOrientation.Vertical"
				},
				{
					"name": "Spacing",
					"applyDefault": "6.0"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Span",
			"members": [
				{
					"name": "FontFamily",
					"applyDefault": "null"
				},
				{
					"name": "FontAttributes",
					"applyDefault": "Xamarin.Forms.FontAttributes.None"
				},
				{
					"name": "FontSize",
					"applyDefault": "-1.0",
					"inputType": "obj",
					"conv": "makeFontSize"
				},
				{
					"name": "BackgroundColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "ForegroundColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "PropertyChanged",
					"applyDefault": "null",
					"inputType": "System.ComponentModel.PropertyChangedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.TimePicker",
			"members": [
				{
					"name": "Time",
					"applyDefault": "new System.TimeSpan()"
				},
				{
					"name": "Format",
					"applyDefault": "\"t\""
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.WebView",
			"members": [
				{
					"name": "Source",
					"uniqueName": "WebSource",
					"applyDefault": "null"
				},
				{
					"name": "Navigated",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.WebNavigatedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.WebNavigatedEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "Navigating",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.WebNavigatingEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.WebNavigatingEventArgs>(fun _sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Page",
			"members": [
				{
					"name": "Title",
					"applyDefault": "\"\""
				},
				{
					"name": "Padding",
					"inputType": "double",
					"conv": "makeThickness",
					"applyDefault": "Unchecked.defaultof<Xamarin.Forms.Thickness>"
				}
			]
		},
		{
			"name": "Xamarin.Forms.CarouselPage",
			"members": [
				{
					"name": "Children",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList"
				},
				{
					"name": "ItemsSource",
					"inputType": "'T list",
					"modelType": "System.Collections.Generic.IList<obj>",
					"conv": "(fun es -> es |> Array.ofList |> Array.map box :> System.Collections.Generic.IList<obj>)",
					"applyDefault": "null"
				},
				{
					"name": "ItemTemplate",
					"applyDefault": "null"
				},
				{
					"name": "SelectedItem",
					"uniqueName": "CarouselPage_SelectedItem",
					"applyDefault": "null"
				},
				{
					"name": "CurrentPage",
					"applyDefault": "null"
				},
				{
					"name": "CurrentPageChanged",
					"applyDefault": "null",
					"inputType": "'T option -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> f ((sender :?> Xamarin.Forms.CarouselPage).SelectedItem |> Option.ofObj |> Option.map unbox<'T>)))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.NavigationPage",
			"members": [
				{
					"name": "BarBackgroundColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "BarTextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "Popped",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.NavigationEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))"
				},
				{
					"name": "PoppedToRoot",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.NavigationEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))"
				},
				{
					"name": "Pushed",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.NavigationEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.TabbedPage",
			"members": [
				{
					"name": "Children",
					"applyDefault": "null",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList"
				},
				{
					"name": "BarBackgroundColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "BarTextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ContentPage",
			"customType": "Elmish.XamarinForms.DynamicViews.CustomContentPage",
			"members": [
				{
					"name": "Content",
					"applyDefault": "null"
				},
							{
								"name": "OnSizeAllocatedCallback",
								"shortName": "onSizeAllocated",
								"modelType": "FSharp.Control.Handler<(double * double)>",
								"inputType": "(double * double) -> unit",
								"conv": "(fun f -> FSharp.Control.Handler<_>(fun _sender args -> f args))",
								"applyCode": "(let target = (target :?> Elmish.XamarinForms.DynamicViews.CustomContentPage) in (match prevValueOpt with None -> () | Some f -> target.SizeAllocated.RemoveHandler(f)); (match valueOpt with None -> () | Some f -> target.SizeAllocated.AddHandler(f)))"
							}
			]
		},
		{
			"name": "Xamarin.Forms.MasterDetailPage",
			"members": [
				{
					"name": "Master",
					"applyDefault": "null"
				},
				{
					"name": "Detail",
					"applyDefault": "null"
				},
				{
					"name": "IsGestureEnabled",
					"applyDefault": "true"
				},
				{
					"name": "IsPresented",
					"applyDefault": "true"
				},
				{
					"name": "MasterBehavior",
					"applyDefault": "Xamarin.Forms.MasterBehavior.Default"
				},
				{
					"name": "IsPresentedChanged",
					"applyDefault": "null",
					"inputType": "bool -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.MasterDetailPage).IsPresented))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.Cell",
			"members": [
				{
					"name": "Height",
					"applyDefault": "-1.0"
				},
				{
					"name": "IsEnabled",
					"applyDefault": "true"
				}
				//ContextActions	- A list of MenuItem objects to display when the user performs the context action.
			]
		},
		{
			"name": "Xamarin.Forms.TextCell",
			"members": [
				{
					"name": "Text",
					"applyDefault": "null"
				},
				{
					"name": "Detail",
					"uniqueName": "TextDetail",
					"applyDefault": "null"
				},
				{
					"name": "TextColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "DetailColor",
					"uniqueName": "TextDetailColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "Command",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "CommandParameter",
					"applyDefault": "null"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ImageCell",
			"members": [
				{
					"name": "ImageSource",
					"applyDefault": "null"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ViewCell",
			"members": [
				{
					"name": "View",
					"applyDefault": "null"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ListView",
			"customType": "Elmish.XamarinForms.DynamicViews.CustomListView",
			"members": [
				{
					"name": "ItemsSource",
					"uniqueName": "ListViewItems",
					"shortName": "items",
					"inputType": "XamlElement list",
					"modelType": "XamlElement[]",
					"conv": "Array.ofList",
					"applyCode": "applyToListViewItems prevValueOpt valueOpt target"
				},
				//{
				//	"name": "ItemTemplate",
				//	"applyDefault": "null"
				//},
				{
					"name": "Footer",
					"applyDefault": "null"
				},
				//{
				//		"name": "FooterTemplate",
				//		"applyDefault": "null"
				//		},
				//	{
				//			"name": "GroupHeaderTemplate",
				//			"applyDefault": "null"
				//		},
				{
					"name": "HasUnevenRows",
					"applyDefault": "false"
				},
				{
					"name": "Header",
					"applyDefault": "null"
				},
				{
					"name": "HeaderTemplate",
					"applyDefault": "null"
				},
				{
					"name": "IsGroupingEnabled",
					"applyDefault": "false"
				},
				{
					"name": "IsPullToRefreshEnabled",
					"applyDefault": "false"
				},
				{
					"name": "IsRefreshing",
					"applyDefault": "false"
				},
				{
					"name": "RefreshCommand",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "RowHeight",
					"applyDefault": "-1"
				},
				{
					// the SelectedItem is stored as an index integer, when we apply it we fetch out the element from the source
					"name": "SelectedItem",
					"uniqueName": "ListView_SelectedItem",
					"applyDefault": "null",
					"modelType": "int option",
					"apply": "(match value with None -> null | Some i -> let items = target.ItemsSource :?> System.Collections.Generic.IList<ListElementData<XamlElement>> in if i >= 0 && i < items.Count then items.[i] else null)"
				},
				{
					"name": "SeparatorVisibility",
					"applyDefault": "Xamarin.Forms.SeparatorVisibility.Default"
				},
				{
					"name": "SeparatorColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "ItemAppearing",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ItemVisibilityEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "ItemDisappearing",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ItemVisibilityEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "ItemSelected",
					"uniqueName": "ListView_ItemSelected",
					"applyDefault": "null",
					"inputType": "int option -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>(fun sender args -> f (args.SelectedItem |> Option.ofObj |> Option.map unbox<ListElementData<XamlElement>> |> Option.bind (fun item -> let items = (sender :?> Xamarin.Forms.ListView).ItemsSource :?> System.Collections.Generic.IList<ListElementData<XamlElement>> in items |> Seq.tryFindIndex (fun item2 -> System.Object.ReferenceEquals(item.Key, item2.Key))))))"
				},
				{
					"name": "ItemTapped",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ItemTappedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "Refreshing",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> f ()))"
				}
			]
		},
		{
			"name": "Xamarin.Forms.ListView",
			"modelName": "ListViewGrouped",
			"customType": "Elmish.XamarinForms.DynamicViews.CustomGroupListView",
			"members": [
				{
					"name": "ItemsSource",
					"uniqueName": "GroupListViewItemsSource",
					"shortName": "items",
					"inputType": "(XamlElement * XamlElement list) list",
					"modelType": "(XamlElement * XamlElement[])[]",
					"conv": "(fun es -> es |> Array.ofList |> Array.map (fun (e,l) -> (e, Array.ofList l)))",
					"applyCode": "applyToListViewGroupedItems prevValueOpt valueOpt target"
				},
				//{
				//	"name": "ItemTemplate",
				//	"applyDefault": "null"
				//},
				{
					"name": "Footer",
					"applyDefault": "null"
				},
				//{
				//		"name": "FooterTemplate",
				//		"applyDefault": "null"
				//		},
				//	{
				//			"name": "GroupHeaderTemplate",
				//			"applyDefault": "null"
				//		},
				{
					"name": "HasUnevenRows",
					"applyDefault": "false"
				},
				{
					"name": "Header",
					"applyDefault": "null"
				},
				//{
				//	"name": "HeaderTemplate",
				//	"applyDefault": "null"
				//},
				{
					"name": "IsGroupingEnabled",
					"applyDefault": "false"
				},
				{
					"name": "IsPullToRefreshEnabled",
					"applyDefault": "false"
				},
				{
					"name": "IsRefreshing",
					"applyDefault": "false"
				},
				{
					"name": "RefreshCommand",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "makeCommand"
				},
				{
					"name": "RowHeight",
					"applyDefault": "-1"
				},
				{
					// the SelectedItem is stored as an index integer, when we apply it we fetch out the element from the source
					"name": "SelectedItem",
					"uniqueName": "ListViewGrouped_SelectedItem",
					"applyDefault": "null",
					"modelType": "(int * int) option",
					"apply": "(match value with None -> null | Some (i,j) -> let items = target.ItemsSource :?> System.Collections.Generic.IList<ListGroupData<XamlElement>> in (if i >= 0 && i < items.Count then (let items2 = items.[i] in if j >= 0 && j < items2.Count then items2.[j] else null) else null))"
				},
				{
					"name": "SeparatorVisibility",
					"applyDefault": "Xamarin.Forms.SeparatorVisibility.Default"
				},
				{
					"name": "SeparatorColor",
					"applyDefault": "Xamarin.Forms.Color.Default"
				},
				{
					"name": "ItemAppearing",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ItemVisibilityEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "ItemDisappearing",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ItemVisibilityEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "ItemSelected",
					"uniqueName": "ListViewGrouped_ItemSelected",
					"applyDefault": "null",
					"inputType": "(int * int) option -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>(fun sender args -> f (args.SelectedItem |> Option.ofObj |> Option.map unbox<ListElementData<XamlElement>> |> Option.bind (fun item -> let items = (sender :?> Xamarin.Forms.ListView).ItemsSource :?> System.Collections.Generic.IList<ListGroupData<XamlElement>> in Seq.indexed items |> Seq.tryPick (fun (i,items2) -> Seq.indexed items2 |> Seq.tryPick (fun (j,item2) -> if System.Object.ReferenceEquals(item.Key, item2.Key) then Some (i,j) else None))))))"
				},
				{
					"name": "ItemTapped",
					"applyDefault": "null",
					"inputType": "Xamarin.Forms.ItemTappedEventArgs -> unit",
					"conv": "(fun f -> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>(fun _sender args -> f args))"
				},
				{
					"name": "Refreshing",
					"applyDefault": "null",
					"inputType": "unit -> unit",
					"conv": "(fun f -> System.EventHandler(fun sender args -> f ()))"
				}
			]
		}
	]
}